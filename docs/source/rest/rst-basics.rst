.. _rst-basics-ref:

Βασικές Έννοιες (Basics)
*****************************
Για να μπορέστε να χρησιμοποιήσετε τη reST, θα πρέπει φυσικά πρώτα να την εγκαταστήσετε στο σύστημά σας. Επίσης θα πρέπει να γίνουν κατανοητές βασικές έννοιες που αφορούν στη συγκεκριμένη γλώσσα όπως το πως δημιουργούμε ένα έγγραφο, από τι αποτελείται ένα έγγραφο, ποια είναι τα βασικά εργαλεία της γλώσσας κ.λπ.

Στο παρόν κεφάλαιο έχουμε συγκεντρώσει ακριβώς όλα αυτά τα "προκαταρτικά" στοιχεία που θα χρειαστούν στη συνέχεια. Αν τώρα εισέρχεστε στη συγκεκριμένη γλώσσα, διαβάστε όλο το περιεχόμενο του κεφαλαίου, θα σας χρειαστεί. Αν πάλι έχετ τις βασικές γνώσεις, μπορείτε να συνεχίσετε στα επόμενα κεφάλαια.

Η reST είναι μία markup γλώσσα προγραμματισμού απλού κειμένου. Διαθέτει απλές και ευνόητες κατασκευές με τις οποίες μπορεί κάποιος με ευκολία να δημιουργήσει κέιμενα κάθε πολυπλοκότητας και έκτασης. Οι κατασκευές αυτές δημιουργήθηκαν με τρόπο ώστε να είναι, κατ' αρχάς εύκολα κατανοητές για το χρήστη αλλά και αποδοτικές στη χρήση τους.

Η γλώσσα πρακτικά είναι δομημένη γύρω από έναν *συντακτικό αναλυτή* (parser), ο οποίος αναλαμβάνει να αναλύσει το αρχείο με το κατάλληλα σημασμένο κείμενο και να το τροφοδοτήσει στο σύστημα που θα αναλάβει τη διαμόρφωση και παρουσίαση του αποτελέσματος. Αυτό με απλά λόγια σημαίνει ότι ο χρήστης γράφει το κείμενό του σε ένα ειδικό αρχείο απλού κειμένου (plain text file), σηματοδοτεί (markup) κατάλληλα τα μέρη που θέλει να διαμορφωθούν με συγκεκριμένο τρόπο και επιλέγει τη διαμόρφωση εξόδου (π.χ. HTML, PDF κ.λπ.). Ο parser αναλαμβάνει να "αποσυναρμολογήσει" το κείμενο στα βασικά του δομικά στοιχεία, να "μεταφράσει" όλες τις reST σημάνσεις σε γλώσσα που είναι κατανοητή από το σύστημα που θα δεχτεί το αποτέλεσμα και το τροφοδοτεί σε κατάλληλο *συντάκτη* (writer). Αν ο χρήστης επιλέξει σα μορφή εξόδου του αρχείου του μία HTML σελίδα, ο parser θα τροφοδοτήσει το ανελυμένο κείμενο σε ένα HTML writer. Ανάλογες διαδικασίες ισχύουν για κάθε επιλεγμένη μορφή διαμόρφωσης (όπως LaTeX, PDF, manpages κ.λπ.).

Πρακτικά λοιπόν όταν μιλάμε για τη reStructuredText (όπως είπαμε, reST ή RST ή ReST για συντομία, εμείς εδώ θα χρησιμοποιούμε το reST), εννοούμε μία γλώσσα προγραμματισμού **και** τον αντίστοιχο parser (σε άλλες γλώσσες προγραμματισμού το ρόλο του αναλυτή αναλαμβάνει κάποιος compiler ή interpreter).




.. _rest-concept-whitespace-ref:

Κενός Χώρος (Whitespace)
============================
Ο κενός χώρος και ο τρόπος που τον χρησιμοποιούμε, έχει μεγάλη σημασία στη δομή ενός εγγράφου γραμμένου σε reST. Συνιστάται η χρήση του πλήκτρου space για την εισαγωγή κενών χαρακτήρων χωρίς αυτό να σημαίνει ότι απαγορεύεται η χρήση του πλήκτρου tab (εισάγει πολλαπλούς κενούς χαρακτήρες, συνήθως 2 ή 4 αν και αυτό ρυθμίζεται στον κάθε editor).

Σε γενικές γραμμές χρειάζεται κάποια προσοχή στον τρόπο που τον χρησιμοποιούμε. Στις περισσότερες περιπτώσεις λάθους επεξεργασίας, το πρόβλημα είναι πιθανό να εντοπίζεται σε λάθος χρήση του κενού χώρου, λεπτομέρειες στη συνέχεια.




.. _rest-concept-blankspace-ref:

Κενοί Χαρακτήρες (Blank Spaces)
-------------------------------------
Μέσα σε μία παράγραφο χρησιμοποιούμε κενούς χαρακτήρες για να διαχωρίζουμε στοιχεία κειμένου (λέξεις, σύμβολα κ.λπ.). Δεν έχει σημασία αν θα χρησιμοποιήσουμε έναν ή περισσότερους κενούς χαρακτήρες, η reST θα λάβει υπόψη μόνο τον πρώτο και θα αγνοήσει τους επόμενους.

Η χρήση του πλήκτρου enter *μία φορά* μέσα σε μία παράγραφο, ισοδυναμεί με έναν κενό χαρακτήρα. Αυτό σημαίνει ότι αν το κάνετε, στον editor θα δείτε αλλαγή γραμμής αλλά στο αποτέλεσμα όχι. Η χρήση του πλήκτρου enter *δύο φορές*, εισάγει μία νέα κενή γραμμή και ο σκοπός της είναι διαφορετικός.




.. _rest-concept-blankline-ref:

Κενές Γραμμές (Blank Lines)
--------------------------------
Οι κενές γραμμές χρησιμοποιούνται για να διαχωρίσουν μεταξύ τους παραγράφους και άλλα στοιχεία κειμένου. Επίσης χρησιμοποιούνται και σαν μηχανισμός ένθεσης περιεχομένου μέσα σε στοιχεία κειμένου (για παράδειγμα λίστες μέσα σε λίστες). Με αυτόν τον τρόπο δημιουργούνται επίπεδα περιεχομένου που συνήθως συνοδεύονται και από αντίστοιχες εσοχές (δες στη συνέχεια :ref:`rest-concept-indentation-ref`).

Πολλές διαδοχικές κενές γραμμές είναι ισοδύναμες με μία. Αυτό δεν ισχύει μέσα σε μπλοκ κυριολεκτικού κειμένου (literal block) όπου όλος ο κενός χώρος διατηρείται.

Η reST θεωρεί ότι πριν από την πρώτη γραμμή κάθε κειμένου και μετά την τελευταία, προηγείται και έπεται μία κενή γραμμή αντίστοιχα. Με απλά λόγια, απομονώνει όλο το κείμενο με κενές γραμμές.

Θα δούμε στη συνέχεια και ανάλογα με την περίπτωση, τον ιδιαίτερο ρόλο των κενών γραμμών.




.. _rest-concept-indentation-ref:

Εσοχές (Indentations)
-------------------------
Οι εσοχές χρησιμοποιούνται για να υποδεικνύουν αποσπάσματα κειμένου (block quotes), ορισμούς (σε λίστες ορισμών) και σε τοπικά ένθετο περιεχόμενο. Ο τελευταίος όρος ειδικότερα σημαίνει:

- Αντικείμενα λιστών (items)
- Το περιεχόμενο ενός μπλοκ *κυριολεκτκού κειμένου* (literal block)
- Το περιεχόμενο μίας κατασκευής *ρητής σήμανσης* (explicit markup)

Επειδή στη reST έχουμε τη δυνατότητα αυθαίρετης ένθεσης περιεχομένου, σε διάφορα επίπεδα (π.χ. περιεχόμενο μέσα σε περιεχόμενο μέσα σε περιεχόμενο κ.ο.κ.), όταν απαιτούνται εσοχές σε οποιοδήποτε επίπεδο, αυτές θεωρείται ότι πρέπει να ξεκινάνε από το αντίστοιχο επίπεδο ένθεσης. Θεωρείται δε ότι τερματίζονται όταν η εσοχή του επόμενου μέρους κειμένου είναι μικρότερη από του παρόντος.

Επίσης, επειδή όλες οι εσοχές είναι σημαντικές για τη reST, πρέπει να υπάρχει συνέπεια και συνέχεια στα επίπεδα εσοχών.

Όταν το κείμενο που περιλαμβάνεται σε ένα μπλοκ με εσοχή, εκτείνεται σε περισσότερες από μία γραμμές, όλες οι γραμμές πρέπει να ξεκινάνε από το "ύψος" της εσοχής. Αυτό φαίνεται στο επόμενο παράδειγμα block quote::

  Αυτή είναι μία κανονική παράγραφος. Ακολουθεί ένα block quote.

    Ένα block quote είναι ένα απόσπασμα κειμένου που θέλουμε
    να διακρίνεται από το υπόλοιπο κείμενο (π.χ. μία φράση που
    είπε κάποιος). Το block πρέπει να έχει εσοχή σε σχέση με το
    τρέχον κείμενο (την κανονική παράγραφο παραπάνω). Χρησιμοποιήστε
    τουλάχιστο δύο spaces για εσοχή.

      Μπορούμε να ενθέσουμε block quote μέσα άλλο, σε
      οποιοδήποτε επίπεδο (όπως εδώ). Γενικότερα, στη reST υπάρχει
      δυνατότητα αυθαίρετης ένθεσης στοιχείων κειμένου μέσα άλλα.
      Για κάθε επίπεδο χρειάζονται νέες εσοχές σε σχέση με το
      προηγούμενο (και πάλι τουλάχιστο δύο spaces).

      Παρατηρήστε επίσης τον τρόπο που στοιχίζεται το κείμενο σε
      κάθε επίπεδο (αριστερά, εκεί που ξεκινάει η αντίστοιχη εσοχή).
      Αν κάνετε λάθη σε αυτές τις λεπτομέρειες, η reST δε θα 
      καταλάβει που θέλετε να τοποθετήσει το αντίστοιχο στοιχείο.

    Αυτή είναι δεύτερη παράγραφος του αρχικού block. Η προηγούμενη
    εσοχή τερματίστηκε γιατί εδώ ξεκινάμε από την ίδια εσοχή με το
    αρχικό μπλοκ.

  Αυτή είναι μία ακόμη κανονική παράγραφος. Είναι κανονική γιατί
  πλέον δε χρησιμοποιούμε εσοχές (τρέχον κείμενο).


-----

**Αποτέλεσμα:**

Αυτή είναι μία κανονική παράγραφος. Ακολουθεί ένα block quote.

  Ένα block quote είναι ένα απόσπασμα κειμένου που θέλουμε
  να διακρίνεται από το υπόλοιπο κείμενο (π.χ. μία φράση που
  είπε κάποιος). Το block πρέπει να έχει εσοχή σε σχέση με το
  τρέχον κείμενο (την κανονική παράγραφο παραπάνω). Χρησιμοποιήστε
  τουλάχιστο δύο spaces για εσοχή.

    Μπορούμε να ενθέσουμε block quote μέσα άλλο, σε οποιοδήποτε
    επίπεδο (όπως εδώ). Γενικότερα, στη reST υπάρχει δυνατότητα
    αυθαίρετης ένθεσης στοιχείων κειμένου μέσα άλλα. Για κάθε
    επίπεδο χρειάζονται νέες εσοχές σε σχέση με το προηγούμενο
    (και πάλι τουλάχιστο δύο spaces).

    Παρατηρήστε επίσης τον τρόπο που στοιχίζεται το κείμενο σε
    κάθε επίπεδο (αριστερά εκεί που ξεκινάει η αντίστοιχη εσοχή.)
    Αν κάνετε λάθη σε αυτές τις λεπτομέρειες, η reST δε θα 
    καταλάβει που θέλετε να τοποθετήσει το αντίστοιχο στοιχείο.

  Αυτή είναι δεύτερη παράγραφος του αρχικού block. Η προηγούμενη
  εσοχή τερματίστηκε γιατί εδώ ξεκινάμε από την ίδια εσοχή με το
  αρχικό μπλοκ.

Αυτή είναι μία ακόμη κανονική παράγραφος. Είναι κανονική γιατί
πλέον δε χρησιμοποιούμε εσοχές (τρέχον κείμενο).
    
-----

Περισσότερες πληροφορίες για τις εσοχές δίνονται στις αντίστοιχες ενότητες, ανάλογα με το στοιχείο κειμένου που χρησιμοποιούνται.

.. ################# Ενότητα "Σήμανση" ###################

.. _rest-concept-markup-ref::

Η Έννοια της "Σήμανσης" (reST Markup)
=================================================

Όπως είπαμε αρκετές φορές, όλες οι markup γλώσσες λειτουργούν με βάση (έγκυρες) σημάνσεις που κάνει ο χρήστης στο κείμενό του. Αυτές τις σημάνσεις, αναλαμβάνουν στη συνέχεια οι αντίστοιχοι parsers, να αναλύσουν. Κάθε μία "μεταφράζεται" σε κάποια μορφοποίηση του κειμένου.

Στη reST οι σημάνσεις έχουν δύο βασικές μορφές, τη *σήμανση γραμμής* (inline markup) και τη *ρητή σήμανση* (explicit markup).


.. _rest-concept-inline-markup-ref:

Η Έννοια "Σήμανση Γραμμής" (Inline Markup Concept)
------------------------------------------------------

Σήμανση γραμμής σημαίνει απλά ότι χρησιμοποιούμε κατάλληλες οδηγίες διαμόρφωσης κειμένου μέσα σε μία κοινή παράγραφο. Για παράδειγμα, στην προηγούμενη παράγραφο κάναμε inline markup στις εκφράσεις "σήμασνη γραμμής" και "ρητή σήμανση", ώστε να διαμορφωθούν σε italics (πλάγια). Αυτό έγινε γράφοντας απλά ``*σήμασνη γραμμής*`` και ``*ρητή σήμανση*`` αντίστοιχα. Η reST ανέλαβε στη συνέχεια τη διαμόρφωση.

Υπάρχουν διάφοροι τρόποι για να κάνουμε σημάνσεις γραμμής. Η μορφοποίηση σε italics είναι ένας από αυτούς. Για τη μορφοποίηση γραμμής χρησιμοποιούμε τα σύμβολα ``*`` και `````, κάτι που θα δούμε αναλυτικά στην Ενότητα ":ref:`rest-inline-markup-ref`". Επίσης σημάνσεις γραμμής μπορούμε να κάνουμε και με τη χρήση "ρόλων", μία έννοια που θα περιγράψουμε στην Ενότητα ":ref:`rest-roles-ref`".


.. _rest-concept-explicit-markup-ref:

Η Έννοια "Ρητή Σήμανση" (Explicit Markup Concept)
----------------------------------------------------

Σε αντίθεση με τη σήμανση γραμμής, ρητή σήμανση κάνουμε όταν θέλουμε να εισάγουμε ή γενικά να διαμορφώσουμε περιεχόμενο που χρειάζεται δικό του χώρο, γιατί δεν μπορεί ή δεν πρέπει να συμπεριληφθεί σε μία κοινή παράγραφο. Τέτοια παραδείγματα είναι ένας πίνακας, μία εικόνα, υποσημειώσεις, σχόλια κ.λπ.. Για να εισάγουμε τέτοιο περιεχόμενο χρησιμοποιούμε ειδικές κατασκευές της reST, σχεδιασμένες γιαυτό το σκοπό.

Τέτοιας μορφής περιεχόμενο (που καταλαμβάνει ειδικό χώρο στο έγγραφο), ονομάζεται *μπλοκ ρητής σήμανσης* (explicit markup block). Ένα τέτοιο μπλοκ ξεκινάει πάντα σε μία νέα γραμμή κειμένου, με τα σύμβολα ``.. `` (φωνητική περιγραφή: τελεία τελεία κενό). Το περιεχόμενο του μπλοκ ξεκινάει μετά το κενό (άρα με εσοχή τρία κενά σε σχέση με τις κανονικές παραγράφους) και τερματίζεται εκεί που ξεκινάει μία νέα κοινή παράγραφος (δηλαδή χωρίς εσοχή). Κάθε τέτοιο μπλοκ διαχωρίζεται από το υπόλοιπο κείμενο με κενές γραμμές (πριν και μετά). Αν και αυτή η περιγραφή μοιάζει περίπλοκη, θα διαπίστώσετε σύντομα ότι δεν είναι. Είναι απλά θέμα οργάνωσης περιεχομένου.

Θα δούμε ποιά είναι και πως χρησιμοποιούνται τέτοια μπλοκ, ανάλογα με την περίπτωση. Για παράδειγμα, μπλοκ ρητής σήμανσης είναι όλες οι "οδηγίες" της reST, μία έννοια που θα δούμε αναλυτικά στην Ενότητα ":ref:`rest-directives-ref`".


.. ---------------- "Μηχανισμός Διαφυγής" -------------------------------------

.. _rest-concept-escape-ref:

Μηχανισμός Διαφυγής (Escaping Mechanism)
==========================================


Το πληκτρολόγιό μας φιλοξενεί εκτός από τους αλφαρηθμητικούς χαρακτήρες (ανάλογα με τη χρησιμοποιούμενη γλώσσα) και ένα σύνολο χαρακτήρων/συμβόλων (ανεξάρτητα από γλώσσα). Μιλάμε φυσικά για τους χαρακτήρες: ``! @ # $ % ^ & * ( ) { } [ ] - _ = + `` κ.λπ. Όλα αυτά τα σύμβολα είναι διαθέσιμα σε εμάς για να αποτυπώνουμε στο κείμενο που θέλουμε (είτε απλό κείμενο είτε κώδικα, δεν έχει σημασία) αλλά ταυτόχρονα έχουν ειδική σημασία και για το πρόγραμμα που θα τα επεξεργαστεί. Στην πραγματικότητα, όλα ανεξαιρέτως τα συστήματα επεξεργασίας (από λειτουργικά συστήματα και γλώσσες προγραμματισμού έως επεξεργαστές κειμένου και εφαρμογές, όλα!) χρησιμοποιούν με ειδικό τρόπο όλα ή κάποια από αυτά τα σύμβολα για εσωτερικές τους διεργασίες. Με άλλα λόγια τα σύμβολα αυτά δεν προορίζονται μόνο για εμάς (επειδή απλά βρίσκονται στο πληκτρολόγιό μας) αλλά και για τα συστήματα πληροφορικής.

Επειδή το σύνολο των διαθέσιμων χαρακτήρων (στο πληκτρολόγιό) είναι πεπερασμένο και όλοι πρέπει να είναι διαθέσιμοι τόσο στον απλό χρήστη όσο και στον προγραμματιστή, οι χαρακτήρες "δεσμεύονται" δηλαδή αποκτούν ειδική σημασία, ανάλογα με το πλαίσιο που τους χρησιμοποιούμε. Για παράδειγμα, στην Python ο χαρακτήρας ``#`` σημαίνει ό,τι ότι ακολουθεί είναι σχόλιο και δε λαμβάνεται υπόψη στην επεξεργασία, στη reST το σύμβολο ``*`` χρησημοποιείται για τη μορφοποίηση κειμένου (το ``*italics*`` μορφοποιείται σαν *italics*) κ.λπ. Τονίζεται όμως ότι δε δεσμεύουν όλα τα συστήματα, όλους τους ειδικούς χαρακτήρες. Θα πρέπει να ανατρέξετε στην τεκμηρίωση του κάθε συστήματος για να βρείτε αυτή τη λεπτομέρεια.

Η δέσμευση όμως κάποιου χαρακτήρα εισάγει και την ανάγκη αυτός να "αποδεσμεύεται" όταν υπάρχει συγκεκριμένος λόγος. Πρέπει δηλαδή να υπάρχει ένας μηχανισμός που να παρακάμπτει την προεπιλεγμένη έννοια των χρησιμοποιούμενων χαρακτήρων. Ο μηχανισμός αυτός λέγεται "μηχανισμός διαφυγής" (escape mechanism). Ο συνήθης τρόπος αποδέσμευσης είναι η χρήση ενός άλλου χαρακτήρα (ή γενικότερα ενός string) αμέσως πριν τον χαρακτήρα που μας ενδιαφέρει. Ο χαρακτήρας (ή το string) που χρησιμοποιείται για τη διαφυγή, λέγεται "χαρακτήρας διαφυγής" (escape charcter). Στις περισσότερες γλώσσες προγραμματισμού αλλά και στα λειτουργικά συστήματα, ο χαρακτήρας διαφυγής είναι το "backslash" ``\`` αν και, επαναλαμβάνουμε, αυτό είναι καθαρά θέμα του πλαισίου (context) στο οποίο αναφερόμαστε, ανατρέξτε στην αντίστοιχη τεκμηρίωση για διευκρινήσεις.

Η reST έχει πιο απλή σχεδίαση στο συγκεκριμένο θέμα γιατί δε διαθέτει κάποιο υποσύστημα αναγνώρισης χαρακτήρων (σαν οντότητες). Ότι γράφουμε στον editor, ερμηνεύεται σαν ένα σύνολο απλών χαρακτήρων πληκτρολογίου (με UTF-8 κωδικοποίηση). Αυτό με απλά λόγια σημαίνει ότι μπορούμε στο κείμενο να χρησιμοποιήσουμε παράλληλα, χαρακτήρες/σύμβολα και σαν χαρακτήρες διαμόρφωσης αλλά και σαν ανεξάρτητους χαρακτήρες. Για παράδειγμα, η *πρόταση* αυτή * γράφτηκε ως εξής: ``η *πρόταση* αυτή * γράφτηκε ως εξής`` (παρατηρήστε τη χρήσησ των ``*``). Παρόλα αυτά και η reST χρησμοποιεί μηχανισμό διαφυγής και συγκεκριμένα το backslash σαν χαρακτήρα διαφυγής.

Στη reST, κάθε χαρακτήρας μετά το χαρακτήρα ``\``, αποδεσμεύεται (εκτός από, σε ορισμένες περιπτώσεις, τον κενό χαρακτήρα). Ο αποδεσμευμένος χαρακτήρας πλέον αντιπροσωπεύει τον εαυτό του και δεν ερμηνεύεται με ειδικό τρόπο. Το ίδιο το ``\`` δεν εμφανίζεται στην έξοδο. Αν θέλουμε να αποδεσμεύσουμε το ίδιο το backslash, χρησιμοποιούμε δύο συνεχόμενα ``\\`` (το πρώτο αποδεσμεύει το δεύτερο).

Ο μηχανισμός διαφυγής με το backslash δε λειτουργεί σε δύο μόνο περιπτώσεις, όταν χρησιμοποιούμε το ``\`` σε "κυριολεκτικό" κείμενο (literal text) σε μπλοκ (literal block) είτε εντός γραμμής (inline literal). Σε τέτοιες περιπτώσεις το κείμενο που γράφουμε δεν υπόκειται σε καμία markup επεξεργασία και παρουσιάζεται ακριβώς όπως γράφεται (το ``\`` θα παραμείνει ως έχει).

.. ----------------------------------------------------------------------------

.. ------------------ "Ονόματα Αναφοράς" --------------------------------------

.. _rest-concept-references-ref:

Αναφορές (References)
========================

Με τον όρο "αναφoρά" εννοούμε γενικά τη δημιουργία μίας σχέσης ή διασύνδεσης δύο αντικειμένων. Το ένα αντικείμενο παίζει το ρόλο του μέσου ή του τρόπου με τον οποίο συνδεόμαστε (ή "δια-συνδεόμαστε") με το άλλο αντικείμενο. Λέμε τότε ότι το πρώτο αντικείμενο "αναφέρεται" στο δεύτερο. Το πρώτο αντικείμενο συχνά λέγεται απλά *όνομα* (name) ή *όνομα αναφοράς* (name reference). Το δεύτερο αντικείμενο λέγεται το *αναφερόμενο* (referent) του πρώτου αντικειμένου. Το όνομα είναι συνήθως ... ένα όνομα (μία λέξη) ή μία φράση (μερικές λέξεις) ή μία *συμβολική αναπαράσταση*. Το αναφερόμενο από την άλλη μπορεί να είναι οτιδήποτε, από μία περιγραφή (παραγραφος/-οι), ένα άτομο (άνθρωπος), μία έννοια κ.λπ, στο γραπτό λόγο μπορούμε να κάνουμε αναφορές σε ότι μπορούμε να φανταστούμε.

Αναφορές συναντάμε όλοι μας καθημερινά, σε σχεδόν κάθε μορφή έντυπης επικοινωνίας, όπως για παράδειγμα τις υποσημειώσεις (footnotes). Το όνομα αναφοράς μίας υποσημείωσης είναι συνήθως ένας αριθμός σε μορφή εκθέτη όπως εδώ [#]_ αλλά και εδώ [#]_ , που μας παραπέμπει να κοιτάξουμε στο κάτω μέρος της ίδιας σελίδας που βρίσκεται ο αριθμός ή κάπου κοντά σε αυτόν. Εκεί βρίσκεται το αναφερόμενο που μπορεί να είναι μία περιγραφή. Άλλα παραδείγματα αναφορών είναι οι βιβλιογραφικές αναφορές (citations), οι πίνακες περιεχομένων (table of contents -- TOC) κ.λπ.

Μπορείτε να βρείτε περισσότερες πληροφορίες για τη έννοια των αναφορών γενικά, από το αντίστοιχο άρθρο της Wikipedia: `"Reference" <https://en.wikipedia.org/wiki/Reference>`_.

-----

.. [#] Αυτό είναι ένα παράδειγμα υποσημείωσης (footnote)
.. [#] Αυτό είναι ένα δεύτερο παράδειγμα υποσημείωσης.




"Ψηφιακές" Αναφορές (References in Computer Science)
--------------------------------------------------------

Στον κόσμο της πληροφορικής τώρα οι αναφορές έχουν μία πολύ πιο ευρεία έννοια. Το *όνομα αναφοράς* που δίνουμε είναι πρακτικά μία *τιμή* (value), που δείχνει σε ένα πρόγραμμα, πως να αποκτήσει πρόσβαση στο *αναφερόμενο* (το δεδομένο μας, αυτό που υπονοούμε στην αναφορά). Το ίδιο το πρόγραμμα γνωρίζει ποιος είναι ο συμβατικός τρόπος να αναζητήσει έναν πόρο, ζητάει από το λειτουργικό σύστημα να υποδείξει τη θέση του, παρέχοντάς του κάποια στοιχεία ταυτότητας (pionters, addresses, id's κ.λπ.). Οι αναφορές δεν ανήκουν σε αυτή τη συμβατική διαδικασία. Είναι περισσότερο ένας έμμεσος αλλά βολικός (για εμάς) τρόπος να δημιουργήσουμε εμείς μία νέα σχέση μεταξύ δύο αντικειμένων. Δίνοντας ένα όνομα αναφοράς και εξηγώντας τον τρόπο που αυτό συνδέεται με κάποιο *αναφερόμενο*, δημιουργούμε έναν εύκολο και γρήγορο τρόπο διασύνδεσης. Εύκολο γιατί εμείς δίνουμε το όνομα αναφοράς και άρα είναι εύκολα αναγνωρίσιμο από εμάς (για μετέπειτα χρήση). Γρήγορο γιατί όλα τα ονόματα αναφοράς αποθηκεύονται από το πρόγραμμα σε ειδικά αρχεία-βάσεις δεδομένων και άρα είναι ήδη γνωστή η θέση τους.

Μπορείτε να βρείτε περισσότερες πληροφορίες για το ρόλο και τη σημασία των αναφορών στο πεδίο της επιστήμης υπολογιστών, από το αντίστοιχο άρθρο της Wikipedia: `"Reference (computer science)" <https://en.wikipedia.org/wiki/Reference_(computer_science)>`_.


Οι Αναφορές στη reST (reST References)
------------------------------------------

Στη reST οι αναφορές είναι οι πλέον συνηθισμένες κατασκευές. Όταν δημιουργείτε ένα έγγραφο στο reST, το πιο πιθανό είναι ότι θα χρησιμοποιήσετε περισσότερες από μία τέτοιες αναφορές. Εξάλλου αυτός ήταν και ο δευτερεύων λόγος δημιουργίας της συγκεκριμένης γλώσσας, να γίνει το πρώτυπο της ενσωματωμένης τεκμηρίωσης της Python. Οπουδήποτε δημιουργείται τεκμηρίωση (για Python), αυτή να είναι προσβάσιμη από οπουδήποτε (όταν λέμε "οπουδήποτε" εννοούμε στον πλανήτη).

Ο τρόπος με τον οποίο δημιουργούμε αναφορές στη reST θα εξηγηθεί κατά περίπτωση σε αντίστοιχες ενότητες. Αυτό που έχει σημασία εδώ είναι να γίνει κατανοητή η παραπάνω φιλοσοφία πίσω από την έννοια "αναφορές". Δίνουμε ένα όνομα (αναφοράς) σε μία οντότητα και οδηγίες του πως να συνδέσει (η reST) αυτό το όνομα με μία άλλη οντότητα.

.. sidebar:: Uniform Resource Identifier

   Στο σημείο αυτό είναι ίσως καλό να εξοικειωθείτε (αν δεν το γνωρίζετε ήδη) με τον όρο :term:`URI` (Uniform Resource identifier) που δημιουργήθηκε ακριβώς γιαυτό το λόγο, να προσδιορίζει με μοναδικό τρόπο έναν πόρο που είναι διαθέσιμος σε κάποιο δίκτυο.

   Η πιο γνωστή μορφή URI είναι το URL (Uniform Resource Locator) ή αυτό που πιθανώς όλοι γνωρίζουμε σαν "διεύθυνση μίας ιστοσελίδας" (αν και η εξήγηση αυτή δεν είναι ακριβής).

Ανεξάρτητα από εμάς, η reST δημιουργεί αυτόματα δικά της ονόματα αναφοράς για βασικά στοιχεία του εγγράφου, όπως οι τίτλοι ενοτήτων. Αυτά τα ονόματα, που ονομάζονται *κλειδιά αναγνώρισης* (identifier key) είναι πρακτικά μία μοναδική ταυτότητα που δίνεται σε ένα στοιχείο κειμένου, για να είναι εύκολος ο εντοπισμός του (π.χ. όλες οι επικεφαλίδες των εγγράφων που διαβάζετε έχουν ένα τέτοιο id). Όλα τα id keys αποθηκεύονται σε ειδικά αρχεία κειμένου ώστε να είναι εύκολη και το κυριότερο γρήγορη η πρόσβαση στα αντίστοιχα στοιχεία. Με αυτόν τον τρόπο μπορούμε να μεταβούμε από ένα μέρος του κειμένου σε οποιοδήποτε άλλο ή από μία εξωτερική θέση σε οποιοδήποτε μέρος του κειμένου ή από το κείμενο σε οποιαδήποτε εξωτερική πηγή. Αυτή είναι η βάση του μηχανισμού αναφορών στη reST.




Κανόνες Σύνταξης Αναφορών
---------------------------

Αν θέλουμε μπορούμε να δημιουργήσουμε εμείς ονόματα αναφοράς είτε απλά (όπως μία λέξη) είτε σύνθετα (όπως μία φράση). Ένα απλό όνομα αναφοράς μπορεί να αποτελείται από:

- αλφαρηθμητικούς χαρακτήρες (alphanumerics),
- παύλες ``-`` (hyphens, αλλά όχι δύο συνεχόμενες),
- κάτω παύλες ``_`` (underscores),
- τελείες ``.`` (periods),
- άνω-κάτω τελείες ``:`` (colons) και
- το σύμβολο της πρόσθεσης ``+`` (add sign).

Εκτός από αυτούς δεν επιτρέπονται άλλοι χαρακτήρες, ούτε κενά. Τα απλά ονόματα αναφοράς μπορούν *προαιρετικά* να σηματοδοτούνται με backquotes ````` (βρίσκεται μαζί με το πλήκτρο :kbd:`escape`).

Μεγαλύτερα σε έκταση ονόματα αναφοράς, είναι επιτρεπτά και λέγονται *φράσεις-αναφορές* (phrase-references). Πρακτικά είναι συνδυασμοί απλών αναφορών που διαχωρίζονται με κενά. Αυτό σημαίνει ότι κάθε string της φράσης πρέπει να ακολουθεί τους παραπάνω κανόνες και μεταξύ των strings να παρεμβάλονται κενά. Επειδή μέσα σε μία φράση-αναφορά μπορεί να χρησιμοποιηθούν και σημεία στίξης (όπως τα παραπάνω, ``-``, ``:`` κ.λπ.), όλη η φράση πρέπει *υποχρεωτικά* να περικλείεται σε backquotes.

Τα ονόματα αναφοράς που δημιουργούμε είναι στην ουσία "ταμπέλες" (labels) για τα id keys της reST, για να θυμόμαστε εμείς που βρίσκεται τι. Θα δούμε στη συνέχεια δύο παραδείγματα για να καταλάβουμε το μηχανισμό. Στο πρώτο παράδειγμα θα χρησιμοποιήσουμε ένα απλό όνομα αναφοράς::

    Από όλες τις γλώσσες προγραμματισμού η `Python`_ είναι η αγαπημένη μου

    .. _Python: http://www.python.org

-----

**Αποτέλεσμα:**

Από όλες τις γλώσσες προγραμματισμού η Python_ είναι η αγαπημένη μου

.. _Python: http://www.python.org

----- 


Στο δεύτερο παράδειγμα θα χρησιμοποιήσουμε μία φράση-αναφορά::

  Από όλες τις γλώσσες προγραμματισμού `η Python είναι η αγαπημένη μου`_

  .. _η Python είναι η αγαπημένη μου: http://www.python.org


-----

**Αποτέλεσμα:**

Από όλες τις γλώσσες προγραμματισμού `η Python είναι η αγαπημένη μου`_

.. _η Python είναι η αγαπημένη μου: http://www.python.org

-----


Παρατηρήστε στα δύο παραδείγματα τον τρόπο σύνταξης και χρήσης των αναφορών. Στο πρώτο παράδειγμα η λέξη "Python" είναι το όνομα αναφοράς (χωρίς την κάτω παύλα). Στο δεύτερο παράδειγμα όλη η φράση "η Python είναι η αγαπημένη μου" είναι μία φράση-αναφορά (και πάλι χωρίς την κάτω παύλα). Αν είναι απλή λέξη δε χρειάζονται backquotes αλλά αν είναι φράση, χρειάζονται. Η reST αντιλαμβάνεται ότι μία λέξη ή μία φράση είναι αναφορά σε κάτι, ανάλογα με το πλαίσιο στο οποίο τις χρησιμοποιούμε. Στα παραπάνω παραδείγματα δημιουργήσαμε αναφορές υπερσυνδέσμων (hyperlinks). Αυτό υποδεικνύεται με την κάτω παύλα ``_``. Ανάλογες σημάνσεις χρησιμοπιοιούμε για άλλου είδους αναφορές (όπως στις υποσημειώσεις έναν αριθμό μέσα σε άγκιστρα π.χ. ``[1]``).




Τεχνικές λεπτομέρειες
-----------------------

Μία καθαρά τεχνική λεπτομέρεια είναι ότι στα ονόματα αναφοράς, τόσο τα κενά όσο και τα πεζοκεφαλαία, κανονικοποιούνται. Αυτό σημαίνει ότι:

- Ένα ή περισσότερα κενά, κάθετα ή οριζόντια tabs και αλλαγές γραμμών (π.χ. με
  :kbd:`enter`), ερμηνεύονται και μετατρέπονται σε έναν μόνο κενό χαρακτήρα.
- Ανεξάρτητα από σειρά εμφάνισης, πεζά και κεφαλαία γράμματα μετατρέπονται σε
  πεζά.

Για παράδειγμα οι επόμενες αναφορές υπερσυνδέσμων είναι όλες ισοδύναμες::

  - `A HYPERLINK`_
  - `a    hyperlink`_
  - `A
    Hyperlink`_

Επίσης λάβετε υπόψη ότι οι υπερσύνδεσμοι, οι υποσημειώσεις και οι βιβλιογραφικές αναφορές, μοιράζονται τον ίδιο *χώρο ονομάτων* (namespace) για τα ονόματα αναφοράς. Αυτό με απλά λόγια σημαίνει ότι τα κλειδιά αναγνώρισης που δημιουργεί αυτόματα η reST για τις αναφορές ή/και τα ονόματα που εμείς δίνουμε (labels), αποθηκεύονται στο ίδιο αρχείο (ή αρχεία). Επίσης αυτό σημαίνει ότι μπορούμε να αναφερθούμε στην ίδια οντότητα είτε με το αυτόματο κλειδί αναγνώρισης είτε με το label που δώσαμε εμείς.




.. ################# Ενότητα "Μονάδες Μέτρησης" ###################

.. _rest-lengths-ref:

Μονάδες Μέτρησης (Unit Lengths)
=================================

Ένα σύστημα στοιχειοθεσίας εγγράφων όπως είναι η reST, χρειάζεται ένα σύστημα μέτρησης για να μπορεί να υπολογίζει διαστάσεις και αποστάσεις. Αυτό δεν είναι κάτι καινούριο. Όλα τα πληροφοριακά συστήματα, χρειάζονται με τον ένα ή τον άλλο τρόπο ένα σύστημα μέτρησης. Η reST (ο parser) το χρειάζεται για να υπολογίζει αποστάσεις (μεταξύ χαρακτήρων, μεταξύ λέξεων, παραγράφων κ.λπ.). Γενικά, οτιδήποτε πρέπει να αναπαρασταθεί στο έγγραφο εξόδου, υπολογίζεται μ ε βάση συγκεκριμένες *μονάδες μέτρησης*.

Ο parser της reSt αναγνωρίζει και υποστηρίζει δύο μορφές μονάδων μέτρησης:

- μονάδες μήκους και
- ποσοστιαίες μονάδες


.. ############ Υποενότητα "Μονάδες Μήκους" #######################

.. _rest-concept-abslength-ref:

Μονάδες Μήκους (Length Units)
-----------------------------
Οι παρακάτω μονάδες μήκους είναι αποδεκτές από τη reST.

.. list-table:: Μονάδες μήκους που υποστηρίζονται από τη reST.
   :header-rows: 1
   :stub-columns: 1
   :width: 80%
   :widths: 10, 20, 30, 40

   * - Μονάδα
     - Όνομα
     - Ορισμός
     - Παρατηρήσεις
   * - em
     - em unit
     - 
     - Το 'μέγεθος' της γραμματοσειράς του τρέχοντος στοιχείου σώματος
   * - ex
     - ex unit
     - 
     - Το 'ύψος' του γράμματος ``x``, της γραμματοσειράς του τρέχοντος
       στοιχείου σώματος
   * - mm
     - milimeter
     - 1 mm = 1/1000 m
     - Ένα χιλιοστό του μέτρου
   * - cm
     - centimeter
     - 1 cm = 1/100 m = 10 mm
     - Ένα εκατοστό του μέτρου
   * - in
     - inch
     - 1 in = 2.54 cm = 96 px
     - Μία ίντσα
   * - px
     - pixel
     - 1 px = 1/96 in
     - Ένα πίξελ
   * - pt
     - point
     - 1 pt = 1/72 in
     - Ελληνικά "σημείο"
   * - pc
     - pica
     - 1 pc = 1/6 in = 12 pt
     - Ελληνικά "πίκα"

Επειδή είναι πιθανό να υπάρξουν απορίες, να κάνουμε μερικές διευκρινήσεις:

Μονάδα "em"
  Η συγκεκριμένη μονάδα μέτρησης προέρχεται από το χώρο της τυπογραφίας. Ένα em είναι ίση με ένα point (σημείο) της *τρέχουσας γραμματοσειράς*. Αν για παράδειγμα χρησιμοποιούμε γραμματοσειρά "μεγέθους" 12 (σημαίνει ύψος 12 σημεία, points), τότε ένα em είναι 12 pt. Αυτό σημαίνει φυσικά ότι:

  - Το μέγεθος είναι σχετικό και όχι απόλυτο. Η διάστασή του εξαρτάται από
    τον τύπο της γραμματοσειράς που χρησιμοποιούμε (typeface). Αυτό σημαίνει ότι διαφέρει ακόμη και μεταξύ τύπων στην ίδια οικογένεια γραμματοσειρών (π.χ. είναι διαφορετικό σε "Arial Normal 12pt" από "Arial Italics 12pt"). 
  - Είναι όμως το ίδιο ακόμη και μεταξύ γραμματοσειρών διαφορετικών
    οικογενειών, αλλά ίδιου τύπου (π.χ. είναι το ίδιο σε "Arial 12pt" και "Lato 12pt").

  
  .. figure:: ../pics/em.png
     :align: right
     :figwidth: 40%
     :width: 100%
     :name: rest-em-unit-ref

     Μονάδα μέτρησης "em" 

     Το γράμμα ``M`` (αγγλικό, κεφαλαίο) από δύο διαφορετικές γραμματοσειρές:
     αριστερά η σειρά "Perpetua" και δεξιά η "Calisto". Τα τετράγωνα έχουν μέγεθος (πλάτος) ακριβώς ένα em.
  
  Το όνομα (em) παραπέμπει στο κεφαλαίο αγγλικό γράμμα ``M``, γιατί η συγκεκριμένη μονάδα μέτρησης είναι ίση με το πλάτος του αυτού του γράμματος (για συγκεκριμένο όμως τύπο και μέγεθος γραμματοσειράς). Αυτό φαίνεται παραστατικά στην :numref:`rest-em-unit-ref` όπου τα δύο τετράγωνα είναι ίδια και ίσα σε διαστάσεις αλλά περιέχουν το καθένα, το γράμμα ``M`` από διαφορετικές γραμματοσειρές αλλά ίδιου τύπου (π.χ. μεγέθους 12pt).
  
  Μπορείτε να βρείτε περισσότερες πληροφορίες στο άρθρο της Wikipedia: "`Em (typography) <https://en.wikipedia.org/wiki/Em_(typography)>`_" από όπου προέρχεται και η εικόνα.
    
Μονάδα "ex"
  Η μονάδα "ex" είναι επίσης σχετική και όχι απόλυτη γιατί εξαρτάται από την τρέχουσα γραμματοσειρά. Είναι η απόσταση μεταξύ της *γραμμής βάσης* (base line) και της *μέσης γραμμής* (mean line), των πεζών γραμμάτων, μίας γραμματοσειράς. Αυτό φαίνεται παραστατικά στην :numref:`rest-ex-unit-ref`.

  .. figure:: ../pics/ex-unit.png
     :figwidth: 70%
     :align: center
     :width: 100%
     :name: rest-ex-unit-ref

     Μονάδα μέτρησης "ex"
     
     Διάγραμμα με τις βασικές (τυπογραφικές) διαστάσεις στοιχειοθεσίας. Η *γραμμή βάσης* είναι η αφετηρία μέτρησης όλων των διαστάσεων. Η μονάδα "ex" είναι ίση με το ύψος του γράμματος ``x`` (x-height).


  Η συγκεκριμένη μονάδα πρακτικά αντιπροσωπεύει το ύψος του πεζού αγγλικού γράμματος "ex" (από όπου προέρχεται και η ονομασία) και είναι ίδια για κάθε γραμματοσειρά ίδιου τύπου.

  Μπορείτε να βρείτε περισσότερες πληροφορίες στο άρθρο της Wikipedia: "`x-height <https://en.wikipedia.org/wiki/X-height>`_" από όπου προέρχεται και η εικόνα.



.. ################ Υποενότητα "Ποσοστιαίες Μονάδες" #####################

.. _rest-concept-perclength-ref:

Ποσοστιαίες Μονάδες (Percentage Units)
--------------------------------------
Οι ποσοστιαίες μονάδες μήκους δεν είναι τίποτε άλλο από ποσοστά άλλων μεγεθών μέτρησης (όπως για παράδειγμα το μήκος της τρέχουσας γραμμής κειμένου ή η απόσταση μεταξύ των παραγράφων κ.λπ.).

Οι ποσοστιαίες μονάδες εισάγονται με έναν ακέραιο αριθμό (από το 1 έως το 100), ακολουθούμενο από το σύμβολο ποσοστού ``%`` ή σε δεκαδική μορφή (``0.1`` έως ``0.9`` με οσαδήποτε ενδιάμεσα δεκαδικά σημεία). Στην τελευταία περίπτωση το μηδέν μπορεί να παραληφθεί (π.χ. ``.32``). Αυτή η ποσοστιαία μονάδα υποδηλώνει το μέρος κάποιου μεγέθους. Για παράδειγμα, αν δείτε τον κώδικα της συγκεκριμένης σελίδας, θα διαπίστώσετε ότι οι παραπάνω δύο εικόνες: :numref:`rest-em-unit-ref` και :numref:`rest-ex-unit-ref`, καταλαμβάνουν (σε πλάτος) το 40% και 70% αντίστοιχα, της γραμμής μίας λίστας ορισμού (αν παρατηρήσετε θα διαπιστώσετε ότι οι δύο εικόνες είναι ένθετες σε μία :ref:`λίστα ορισμών <rest-definition-list-ref>`). Ο κώδικας που χρησιμοποιήσαμε είναι::

  .. figure:: ../pics/em.png
     :align: right
     :figwidth: 40%
     :width: 100%
     :name: rest-em-unit-ref

     Μονάδα μέτρησης "em" 

     Το γράμμα ``M`` (αγγλικό, κεφαλαίο) από δύο διαφορετικές
     γραμματοσειρές: αριστερά η σειρά "Perpetua" και δεξιά
     η "Calisto". Τα τετράγωνα έχουν μέγεθος (πλάτος) ακριβώς
     ένα em.

... για την πρώτη και ...::

  .. figure:: ../pics/ex-unit.png
     :figwidth: 70%
     :align: center
     :width: 100%
     :name: rest-ex-unit-ref

     Μονάδα μέτρησης "ex"
     
     Διάγραμμα με τις βασικές (τυπογραφικές) διαστάσεις
     στοιχειοθεσίας. Η *γραμμή βάσης* είναι η αφετηρία μέτρησης
     όλων των διαστάσεων. Η μονάδα "ex" είναι ίση με το ύψος
     του γράμματος ``x`` (x-height).

... για τη δεύτερη. Παρατηρήστε και στις δύο περιπτώσεις ότι δίνουμε οδηγίες οι εικόνες να καταλάβουν ποσοστά της τρέχουσας γραμμής (αυτό σημαίνουν οι επιλογές ``:figwidth: 40%`` και ``:figwidth: 70%``).

Οι ποσοστιαίες μονάδες είναι ένας βολικός και γρήγορος τρόπος για να καθορίζουμε μήκη. Μην ξεχνάτε όμως το πλαίσιο (context) στο οποίο τις χρησιμοποιείτε, όπως παραπάνω μέσα σε μία λίστα, όπου το ποσοστό αφορά το μήκος γραμμής της λίστας και όχι της γραμμής σελίδας.


.. _rest-common-options-ref:

Κοινές Επιλογές (Common Options)
-----------------------------------


