Ορολογία
#########

.. glossary::
    **Delimeter**
        (ελλ. "Οριοθέτης") Οι οριοθέτες είναι σειρές συμβόλων (είτε ένα είτε περισσότερα), οι οποίοι καθορίζουν τα όρια μεταξύ ξεχωριστών και ανεξάρτητων περιοχών είτε απλού κειμένου είτε μίας ροής δεδομένων.
        
        Αν θέλετε μία εύκολη αναλογία από την καθημερινότητά μας, σκεφτείτε τα σύμβολα κόμμα, τελεία, απόστροφο κ.λπ. (δηλαδή τα *σημεία στίξης*) ή τα ζεύγη παρενθέσεων, αγκίστρων κ.λπ. Όλα αυτά τα σύμβολα, στην απλή καθημερινή γραφή και με βάση τους γνωστούς κανόνες γραμματικής, παίζουν ακριβώς αυτό το ρόλο του οριοθέτη μέσα στο κείμενο. Οι τελείες για να διαχωρίζουν προτάσεις, τα κόμματα για να διαχωρίζουν κομμάτια κειμένου μέσα σε μία πρόταση, οι παρενθέσεις για να ομαδοποιούν κείμενο κ.ο.κ.

        Με ανάλογο τρόπο και στον κόσμο της πληροφορικής, όταν γράφουμε ένα κείμενο (είτε απλό είτε κώδικα) αυτό που πρακτικά κάνουμε είναι να εισάγουμε σειρές συμβόλων (strings). Το σύστημα που θα κληθεί να επεξεργαστεί αυτό που γράψαμε, δε γνωρίζει τη γραμματική μίας φυσικής γλώσσας, απλά αντιλαμβάνεται όλους τους χαρακτήρες σαν σύμβολα (είτε είναι ένα γράμμα είτε ένα κόμμα είτε ένα ερωτηματικό κ.λπ.). Επειδή όμως η ανάγκη να κωδικοποιείται ένα κείμενο, υφίσταται και στον κόσμο της πληροφορικής, καθιερώθηκαν κανόνες γραμματικής και για τις γλώσσες προγραμματισμού αλλά και τα πληροφοριακά συστήματα γενικά (όπως τα λειτουργικά συστήματα). Μεταξύ αυτών των κανόνων είναι και ο τρόπος χρήσης συμβόλων, πέρα από την αυτονόητη έννοιά τους. Δηλαδή σε μία γλώσσα προγραμματισμού μπορούμε να χρησιμοποοιήσουμε το κόμμα κατά την κοινή του χρήση (όπως σε μία φυσική γλώσσα) αλλά και με διαφορετικό τρόπο, αν ισχύουν κάποιοι κανόνες.

        Παράδειγμα είναι ο χαρακτήρας ``*`` που στις περισσότερες markup γλώσσες έχει το ρόλο οριοθέτη διαμόρφωσης κειμένου, ότι κείμενο βρίσκεται μεταξύ δύο ``*``, μορφοποιείται σαν italics, ότι κείμενο βρίσκεται μεταξύ ζευγών ``**``, μορφοποιείται σαν bold κ.λπ.

        Υπάρχει μερική μόνο τυποποίηση στο είδος των οριοθετών και τον τρόπο χρήσης τους, μεταξύ των γλωσσών προγγραμματισμού και πληροφοριακών συστημάτων. Η τεκμηρίωση του κάθε συστήματος διευκρνίζει επακριβώς τους ισχύοντες οριοθέτες.

    **Escape Character**
        (ελλ. "Χαρακτήρας Διαφυγής") Στην πληροφορική γενικά, ένας *χαρακτήρας διαφυγής* είναι ένας χαρακτήρας (συνήθως υπάρχει στο πληκτρολόγιό μας) που υποχρεώνει κάποιο σύστημα επεξεργασίας, να διαχειριστεί με τρόπο διαφορετικό από το συνηθισμένο, τους χαρακτήρες που τον ακολουθούν.

        Σε όλες τις γλώσσες προγραμματισμού αλλά και τα λειτουργικά συστήματα και περιβάλλοντα ανάπτυξης εφαρμογών (αυτά είναι μερικά συστήματα επεξεργασίας), κάποιοι ή όλοι από τους μη αλφαριθμητικούς χαρακτήρες (δηλαδή τα σύμβολα) έχουν ειδική σημασία, πέρα από το τι συμβολίζουν. Οι χαρακτήρες αυτοί είναι δηλαδή *ειδικοί χαρακτήρες* (special characters). Τέτοιοι χαρακτήρες είναι για παράδειγμα τα σύμβολα ``!, @, #, $, %, ^, &, *, \, /`` κ.λπ. Δεν είναι υποχρεωτικό ότι όλα τα σύμβολα έχουν ειδική σημασία για όλα τα συστήματα. Το ποιοί ακριβώς είναι οι special characters και τι είδους σημασία έχουν, καθορίζεται ρητά στην τεκμηρίωση του αντίστοιχου συστήματος.

        .. note::
            Οι special characters ονομάζονται και `metacharacters <https://en.wikipedia.org/wiki/Metacharacter>`_ (μετα-χαρακτήρες).

        Για παράδειγμα, ο χαρακτήρας ``#`` (hash ή number sign) στη γλώσσα Python σημαίνει ότι οτιδήποτε τον ακολουθεί, μέχρι το τέλος της τρέχουσας γραμμής κειμένου, είναι ένα σχόλιο (comment). Στη γλώσσα LaTeX ο αντίστοιχος χαρακτήρας είναι ο ``%``. Τα σχόλια δε λαμβάνονται υπόψη κατά την επεξεργασία κώδικα, χρησιμοποιούνται κυρίως σαν σημειώσεις του προγραμματιστή, για να τεκμηριώνει τον κώδικά του.

        Τι γίνεται όμως όταν πρέπει να χρησιμοποιήσουμε τέτοιους χαρακτήρες στο κείμενό μας, πέρα από την ειδική χρήση τους (να εμφανιστούν δηλαδή όπως ακριβώς είναι). Για να γίνει αυτό πρέπει πρώτα ο χαρακτήρας να "αποδεσμευτεί" (escaped) δηλαδή να πάψει προσωρινά να έχει ειδική σημασία. Όλες οι γλώσσες προγραμματισμού και τα συστήματα επεξεργασίας γενικά, που χρησιμοποιούν ειδικούς χαρακτήρες, προσφέρουν αυτή τη δυνατότητα μέσω άλλων χαρακτήρων που προστίθενται ακριβώς πριν από το χαρακτήρα που μας ενδιαφέρει. Αυτοί είνα οι *χαρακτήρες διαφυγής* οι οποίοι επίσης καθορίζονται ρητά, στην τεκμηρίωση του αντίστοιχου συστήματος. Στα παραπάνω δύο παραδείγματα, μπορεί να χρησιμοποιηθεί ο χαρακτήρας ``\`` (backslash) σαν χαρακτήρας διαφυγής, δηλαδή μπορούμε να γράψουμε στο κείμενό μας ``\#`` και ``\%``, για Python και LaTeX αντίστοιχα, για να πάρουμε αυτούσιους τους χαρακτήρες ``#`` και ``%``.

        Θα πρέπει να δίνεται ιδιαίτερη σημασία τόσο στην έννοια που αποδίδεται σε κάθε χαρακτήρα, στο πλαίσιο του επεξεργαστικού συστήματος που χρησιμοποιούμε καθώς και στη χρήση των αντίστοιχων χαρακτήρων διαφυγής, ώστε να μην προκύπτουν λάθη κατά την επεξεργασία κώδικα.

        (για την περιγραφή του όρου λήφθηκαν πληροφορίες από τα άρθρα της Wikipedia `"Escape character" <https://en.wikipedia.org/wiki/Escape_character>`_ και `"Metacharacter" <https://en.wikipedia.org/wiki/Metacharacter>`_ καθώς και άλλες δικτυακές πηγές)


    **Tutorial**
        (ελλ. "Εκπαιδευτικό Υλικό" ή "Μάθημα" ή "Διδασκαλία"). Ένα *tutorial* είναι κατάλληλο υλικό που σκοπό έχει να μεταδώσει γνώσεις για κάποιο αντικείμενο/πεδίο/τομέα, με περισσότερο διαδραστικό τρόπο από ότι ένα βιβλίο (book) ή μία διάλεξη (lecture). Συνήθως ένα tutorial περιλαμβάνει παραδείγματα ή/και πληροφορίες, για να υλοποιηθεί κάποια συγκεκριμένη εργασία/σκοπός. Είναι προσανατολισμένο στην αρχική μετάδοση γνώσεων (learning-oriented).

        Ένα tutorial δεν επεκτείνεται σε πολλές τεχνικές λεπτομέρειες πάνω στο γνωστικό πεδίο του αντικειμένου του. Είναι περισσότερο μία σειρά απλών και κατανοητών βημάτων που καθοδηγούν κάποιον μη ειδικό ή αρχάριο στο να κατανοήσει κάτι. Για παράδειγμα ένα tutorial με τίτλο "Εισαγωή στην Python" ή "Η Γλώσσα Προγραμματισμού Python", έχει σκοπό να μεταφέρει σε έναν αρχάριο τις βασικές (εγκυκλοπαιδικές) γνώσεις για να κατανοήσει και να χρησιμοποιήσει (ως έναν βαθμό) τη συγκεκριμένη γλώσσα. Όχι όμως πως να κάνει προγραμματισμό σε βάθος με αυτή. Αντίθετα ένα *βιβλίο* με αντίστοιχο τίτλο μπορεί να επεκταθεί αυθαίρετα και σε οποιονδήποτε βαθμό, σε αντίστοιχα θέματα. Αντίστοιχα ένας *Οδηγός Χρήστη* (δες :term:`How to Guide`) ή *Οδηγός Εκμάθησης* (δες :term:`User Guide`) μπορούν μπορούν να επεκταθούν σε ακόμη πιο εξειδικευμένα θέματα. Μπορείτε να δείτε πως μοιάζει ο επίσημος `"οδηγός χρήστη για αρχάριους" <https://wiki.python.org/moin/BeginnersGuide>`_ στην Python και το επίσημο `"The Python Tutorial" <https://docs.python.org/3/tutorial/index.html>`_ της τελευταίας έκδοσης (3.8).

        Φυσικά ένα tutorial μπορεί να έχει έντυπη η ψηφιακή μορφή (ηλεκτρονικά έγγραφα, video, ιστοσελίδες κ.λπ.).

        (για την περιγραφή του όρου λήφθηκαν πληροφορίες από `Wikipedia "Tutorial" <https://en.wikipedia.org/wiki/Tutorial>`_ και άλλες δικτυακές πηγές)

    **How to Guide**
        Ανεπίσημος και συνήθως σύντομος οδηγός ή εκπαιδευτικό υλικό, που περιγράφει με σαφή τρόπο πως να αντιμετωπισθεί μία συγκεκριμένη κατάσταση/θέμα/αντικείμενο/εργασία.

        (για την περιγραφή του όρου λήφθηκαν πληροφορίες από `Wikipedia "How to" <https://en.wikipedia.org/wiki/How-to>`_ και άλλες δικτυακές πηγές)
    
    **User Guide**



